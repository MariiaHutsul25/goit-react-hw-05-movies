{"version":3,"sources":["services/api.jsx","components/MovieDetailsPage/MovieDetailsPage.jsx"],"names":["API_KEY","BASE_URL","fetchMovies","a","axios","get","responce","trendingMovies","data","results","map","id","title","fetchMovieById","response","fetchReviews","reviewsMovies","author","content","fetchCasts","cast","getMoviesQuery","query","responceCasts","Cast","lazy","Reviews","MovieDetailsPage","match","useRouteMatch","useState","moviesIdInfo","setMoviesIdInfo","moviesIdReview","setMoviesIdReview","moviesIdCast","setMoviesIdCast","moviesId","useParams","routerState","useRef","history","useHistory","location","useLocation","console","log","useEffect","current","state","then","onClick","paramsPath","params","pathname","paramsSearch","search","push","src","poster_path","alt","width","release_date","slice","overview","genres","genre","name","to","url","path"],"mappings":"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","file":"static/js/5.76ab8e61.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_KEY = \"fa84220f1f9a5152653d3d7d5b11f1de\";\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\n\r\nconst fetchMovies = async () => {\r\n  const responce = await axios.get(\r\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\r\n  );\r\n  const trendingMovies = responce.data.results.map(({ id, title }) => {\r\n    return { id, title };\r\n  });\r\n  return trendingMovies;\r\n};\r\n\r\nconst fetchMovieById = async (id) => {\r\n  const response = await axios.get(\r\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}`\r\n  );\r\n\r\n  return response.data;\r\n};\r\n\r\nconst fetchReviews = async (id) => {\r\n  const response = await axios.get(\r\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\r\n  );\r\n  const reviewsMovies = response.data.results.map(({ author, content, id }) => {\r\n    return { author, content, id };\r\n  });\r\n  return reviewsMovies;\r\n};\r\n\r\nconst fetchCasts = async (id) => {\r\n  const response = await axios.get(\r\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\r\n  );\r\n  return response.data.cast;\r\n};\r\n\r\nconst getMoviesQuery = async (query) => {\r\n  const responceCasts = await axios.get(\r\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${query}`\r\n  );\r\n  return responceCasts.data.results;\r\n};\r\n\r\nexport {\r\n  fetchMovies,\r\n  fetchMovieById,\r\n  fetchCasts,\r\n  fetchReviews,\r\n  getMoviesQuery,\r\n};\r\n","import { useState, useEffect, lazy, useRef } from \"react\";\r\nimport {\r\n  Route,\r\n  useLocation,\r\n  useHistory,\r\n  useParams,\r\n  useRouteMatch,\r\n  Link,\r\n} from \"react-router-dom\";\r\nimport { fetchMovieById, fetchCasts, fetchReviews } from \"../../services/api\";\r\nconst Cast = lazy(() => import(\"../Cast/Cast\"));\r\nconst Reviews = lazy(() => import(\"../Reviews/Reviews\"));\r\n\r\n// const IMG_URL = \"https://image.tmdb.org/t/p/w500\";\r\n//image.tmdb.org/t/p/w500/fSebGYTxVrHXE4y3Su5uwJSEtni.jpg\r\n\r\nfunction MovieDetailsPage() {\r\n  const match = useRouteMatch();\r\n\r\n  const [moviesIdInfo, setMoviesIdInfo] = useState(null);\r\n  const [moviesIdReview, setMoviesIdReview] = useState(null);\r\n  const [moviesIdCast, setMoviesIdCast] = useState(null);\r\n\r\n  const { moviesId } = useParams();\r\n  const routerState = useRef(null);\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  console.log(`location`, location);\r\n\r\n  useEffect(() => {\r\n    if (!routerState.current) {\r\n      routerState.current = location.state;\r\n    }\r\n  }, [location.state]);\r\n\r\n  useEffect(() => {\r\n    fetchMovieById(moviesId).then(setMoviesIdInfo);\r\n    fetchReviews(moviesId).then(setMoviesIdReview);\r\n    fetchCasts(moviesId).then(setMoviesIdCast);\r\n  }, [moviesId]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onClick={() => {\r\n          const paramsPath = routerState.current.params.pathname;\r\n          const paramsSearch = routerState.current.params.search;\r\n          history.push(`${paramsPath}${paramsSearch}`);\r\n        }}\r\n      >\r\n        Назад\r\n      </button>\r\n      <h2>MovieDetailsPage</h2>\r\n      {moviesIdInfo && (\r\n        <>\r\n          <img\r\n            src={`https://image.tmdb.org/t/p/w500${moviesIdInfo.poster_path}`}\r\n            alt={moviesIdInfo.title}\r\n            width=\"150\"\r\n          />\r\n          <h2>\r\n            {moviesIdInfo.title}(\r\n            {moviesIdInfo?.release_date?.slice(0, 4) ?? \"Not\"})\r\n          </h2>\r\n          <h3>Overview:</h3>\r\n          <p>{moviesIdInfo.overview}</p>\r\n          <h3>Genres</h3>\r\n          <p>{moviesIdInfo?.genres?.map((genre) => genre.name + \" \")}</p>\r\n          <Link to={`${match.url}/cast`}>\r\n            <li>Cast</li>\r\n          </Link>\r\n          <Link to={`${match.url}/reviews`}>\r\n            <li>Reviews</li>\r\n          </Link>\r\n          <Route path={`${match.url}/cast`}>\r\n            {moviesIdCast && <Cast moviesIdCast={moviesIdCast} />}\r\n          </Route>\r\n          <Route path={`${match.url}/reviews`}>\r\n            {moviesIdReview && <Reviews moviesIdReview={moviesIdReview} />}\r\n          </Route>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nexport default MovieDetailsPage;\r\n"],"sourceRoot":""}